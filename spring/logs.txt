
==> Audit <==
|--------------|------------------------------------|--------------|-------|---------|----------------------|----------------------|
|   Command    |                Args                |   Profile    | User  | Version |      Start Time      |       End Time       |
|--------------|------------------------------------|--------------|-------|---------|----------------------|----------------------|
| ip           |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 15:40 AEST | 13 Jul 24 15:40 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 15:52 AEST | 13 Jul 24 15:52 AEST |
| addons       | enable ingress                     | minikube     | jxhui | v1.33.1 | 13 Jul 24 15:52 AEST | 13 Jul 24 15:52 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 15:56 AEST | 13 Jul 24 15:58 AEST |
| service      | rancher --namespace                | minikube     | jxhui | v1.33.1 | 13 Jul 24 15:57 AEST | 13 Jul 24 15:57 AEST |
|              | cattle-system                      |              |       |         |                      |                      |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 16:01 AEST | 13 Jul 24 16:03 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 16:03 AEST | 13 Jul 24 21:18 AEST |
| update-check |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 16:08 AEST | 13 Jul 24 16:08 AEST |
| update-check |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 16:10 AEST | 13 Jul 24 16:10 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 19:11 AEST | 13 Jul 24 19:11 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:02 AEST | 13 Jul 24 21:02 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:03 AEST | 13 Jul 24 21:03 AEST |
| cache        | add                                | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:14 AEST | 13 Jul 24 21:14 AEST |
|              | jikan-ga-aru-server:0.0.1-SNAPSHOT |              |       |         |                      |                      |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:15 AEST | 13 Jul 24 21:15 AEST |
| cache        | add                                | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:15 AEST | 13 Jul 24 21:15 AEST |
|              | jikan-ga-aru-server:0.0.1-SNAPSHOT |              |       |         |                      |                      |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:16 AEST | 13 Jul 24 21:16 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:16 AEST | 13 Jul 24 21:16 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 13 Jul 24 21:18 AEST | 14 Jul 24 14:45 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 14:45 AEST | 14 Jul 24 14:52 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 14:52 AEST | 14 Jul 24 14:55 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 14:55 AEST | 14 Jul 24 14:59 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 14:59 AEST | 14 Jul 24 15:10 AEST |
| ip           |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:00 AEST | 14 Jul 24 15:00 AEST |
| update-check |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:09 AEST | 14 Jul 24 15:09 AEST |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:10 AEST |                      |
| ip           |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:13 AEST | 14 Jul 24 15:13 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:28 AEST | 14 Jul 24 15:28 AEST |
| stop         |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:31 AEST | 14 Jul 24 15:31 AEST |
| start        | --cpus=4 --memory=8g               | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:41 AEST | 14 Jul 24 15:42 AEST |
|              | --driver=docker                    |              |       |         |                      |                      |
|              | --kubernetes-version=1.28          |              |       |         |                      |                      |
| tunnel       |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:44 AEST |                      |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:49 AEST | 14 Jul 24 15:49 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:49 AEST | 14 Jul 24 15:49 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:49 AEST | 14 Jul 24 15:49 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:49 AEST | 14 Jul 24 15:49 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:49 AEST | 14 Jul 24 15:49 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:50 AEST | 14 Jul 24 15:50 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:50 AEST | 14 Jul 24 15:50 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:50 AEST | 14 Jul 24 15:50 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:50 AEST | 14 Jul 24 15:50 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 15:50 AEST | 14 Jul 24 15:50 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 16:06 AEST | 14 Jul 24 16:06 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 16:06 AEST | 14 Jul 24 16:06 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 16:10 AEST | 14 Jul 24 16:10 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 16:10 AEST | 14 Jul 24 16:10 AEST |
| update-check |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 16:19 AEST | 14 Jul 24 16:19 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 16:24 AEST | 14 Jul 24 16:24 AEST |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 16:24 AEST | 14 Jul 24 16:24 AEST |
| stop         |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:00 AEST | 14 Jul 24 19:00 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:03 AEST |                      |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:03 AEST | 14 Jul 24 19:03 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:03 AEST |                      |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:03 AEST | 14 Jul 24 19:03 AEST |
| start        | --cpus=4 --memory=8g               | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:04 AEST |                      |
|              | --driver=docker                    |              |       |         |                      |                      |
|              | --kubernetes-version=1.28          |              |       |         |                      |                      |
| update-check |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:07 AEST | 14 Jul 24 19:07 AEST |
| stop         |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:08 AEST | 14 Jul 24 19:08 AEST |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:08 AEST |                      |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:08 AEST | 14 Jul 24 19:08 AEST |
| start        | --cpus=4 --memory=8g               | minikube-x86 | jxhui | v1.33.1 | 14 Jul 24 19:09 AEST |                      |
|              | --driver=docker                    |              |       |         |                      |                      |
|              | --kubernetes-version=1.28 -p       |              |       |         |                      |                      |
|              | minikube-x86                       |              |       |         |                      |                      |
| docker-env   |                                    | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:10 AEST |                      |
| docker-env   | -u                                 | minikube     | jxhui | v1.33.1 | 14 Jul 24 19:10 AEST | 14 Jul 24 19:10 AEST |
|--------------|------------------------------------|--------------|-------|---------|----------------------|----------------------|


==> Last Start <==
Log file created at: 2024/07/14 19:09:34
Running on machine: Jimmys-MBP-16
Binary: Built with gc go1.22.3 for darwin/arm64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0714 19:09:34.537307   85028 out.go:291] Setting OutFile to fd 1 ...
I0714 19:09:34.537411   85028 out.go:343] isatty.IsTerminal(1) = true
I0714 19:09:34.537413   85028 out.go:304] Setting ErrFile to fd 2...
I0714 19:09:34.537416   85028 out.go:343] isatty.IsTerminal(2) = true
I0714 19:09:34.537524   85028 root.go:338] Updating PATH: /Users/jxhui/.minikube/bin
I0714 19:09:34.537876   85028 out.go:298] Setting JSON to false
I0714 19:09:34.559584   85028 start.go:129] hostinfo: {"hostname":"Jimmys-MBP-16","uptime":260560,"bootTime":1720687614,"procs":841,"os":"darwin","platform":"darwin","platformFamily":"Standalone Workstation","platformVersion":"14.5","kernelVersion":"23.5.0","kernelArch":"arm64","virtualizationSystem":"","virtualizationRole":"","hostId":"e78835f8-a61b-5782-a4ac-07144383699d"}
W0714 19:09:34.559662   85028 start.go:137] gopshost.Virtualization returned error: not implemented yet
I0714 19:09:34.564677   85028 out.go:177] 😄  [minikube-x86] minikube v1.33.1 on Darwin 14.5 (arm64)
I0714 19:09:34.571407   85028 notify.go:220] Checking for updates...
I0714 19:09:34.571712   85028 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.9
I0714 19:09:34.573392   85028 out.go:177] 👉  Using Kubernetes 1.28.9 since patch version was unspecified
I0714 19:09:34.576486   85028 driver.go:392] Setting default libvirt URI to qemu:///system
I0714 19:09:34.632831   85028 docker.go:122] docker version: linux-26.1.1:Docker Engine - Community
I0714 19:09:34.632937   85028 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0714 19:09:34.696060   85028 info.go:266] docker info: {ID:ec12c987-6370-4b50-861d-ad12319685fa Containers:1 ContainersRunning:0 ContainersPaused:0 ContainersStopped:1 Images:1 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:23 OomKillDisable:false NGoroutines:41 SystemTime:2024-07-14 19:09:34.634623482 +1000 AEST LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:6.8.0-31-generic OperatingSystem:Ubuntu 24.04 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:6 MemTotal:9366151168 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:colima-x86 Labels:[] ExperimentalBuild:false ServerVersion:26.1.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:e377cd56a71523140ca6ae87e30244719194a521 Expected:e377cd56a71523140ca6ae87e30244719194a521} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/Users/jxhui/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.14.1] map[Name:compose Path:/Users/jxhui/.docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.27.1]] Warnings:<nil>}}
I0714 19:09:34.703643   85028 out.go:177] ✨  Using the docker driver based on user configuration
I0714 19:09:34.706610   85028 start.go:297] selected driver: docker
I0714 19:09:34.706613   85028 start.go:901] validating driver "docker" against <nil>
I0714 19:09:34.706621   85028 start.go:912] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0714 19:09:34.706769   85028 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0714 19:09:34.761383   85028 info.go:266] docker info: {ID:ec12c987-6370-4b50-861d-ad12319685fa Containers:1 ContainersRunning:0 ContainersPaused:0 ContainersStopped:1 Images:1 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:23 OomKillDisable:false NGoroutines:41 SystemTime:2024-07-14 19:09:34.705399478 +1000 AEST LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:6.8.0-31-generic OperatingSystem:Ubuntu 24.04 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:6 MemTotal:9366151168 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:colima-x86 Labels:[] ExperimentalBuild:false ServerVersion:26.1.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:e377cd56a71523140ca6ae87e30244719194a521 Expected:e377cd56a71523140ca6ae87e30244719194a521} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/Users/jxhui/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.14.1] map[Name:compose Path:/Users/jxhui/.docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.27.1]] Warnings:<nil>}}
I0714 19:09:34.761480   85028 start_flags.go:310] no existing cluster config was found, will generate one from the flags 
I0714 19:09:34.761833   85028 start_flags.go:929] Wait components to verify : map[apiserver:true system_pods:true]
I0714 19:09:34.764578   85028 out.go:177] 📌  Using Docker Desktop driver with root privileges
I0714 19:09:34.767640   85028 cni.go:84] Creating CNI manager for ""
I0714 19:09:34.767651   85028 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0714 19:09:34.767655   85028 start_flags.go:319] Found "bridge CNI" CNI - setting NetworkPlugin=cni
I0714 19:09:34.767726   85028 start.go:340] cluster config:
{Name:minikube-x86 KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:8192 CPUs:4 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.9 ClusterName:minikube-x86 Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.28.9 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0714 19:09:34.774641   85028 out.go:177] 👍  Starting "minikube-x86" primary control-plane node in "minikube-x86" cluster
I0714 19:09:34.777501   85028 cache.go:121] Beginning downloading kic base image for docker with docker
I0714 19:09:34.780525   85028 out.go:177] 🚜  Pulling base image v0.0.44 ...
I0714 19:09:34.786645   85028 preload.go:132] Checking if preload exists for k8s version v1.28.9 and runtime docker
I0714 19:09:34.786659   85028 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e in local docker daemon
I0714 19:09:34.786690   85028 preload.go:147] Found local preload: /Users/jxhui/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.9-docker-overlay2-arm64.tar.lz4
I0714 19:09:34.786697   85028 cache.go:56] Caching tarball of preloaded images
I0714 19:09:34.786781   85028 preload.go:173] Found /Users/jxhui/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.9-docker-overlay2-arm64.tar.lz4 in cache, skipping download
I0714 19:09:34.786786   85028 cache.go:59] Finished verifying existence of preloaded tar for v1.28.9 on docker
I0714 19:09:34.786889   85028 profile.go:143] Saving config to /Users/jxhui/.minikube/profiles/minikube-x86/config.json ...
I0714 19:09:34.786926   85028 lock.go:35] WriteFile acquiring /Users/jxhui/.minikube/profiles/minikube-x86/config.json: {Name:mkee3bbd358d3d333d07e15065f9483eb8e76ffe Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:09:34.800588   85028 cache.go:149] Downloading gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e to local cache
I0714 19:09:34.800705   85028 image.go:63] Checking for gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e in local cache directory
I0714 19:09:34.800730   85028 image.go:66] Found gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e in local cache directory, skipping pull
I0714 19:09:34.800732   85028 image.go:105] gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e exists in cache, skipping pull
I0714 19:09:34.800736   85028 cache.go:152] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e as a tarball
I0714 19:09:34.800738   85028 cache.go:162] Loading gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e from local cache
I0714 19:10:17.641926   85028 cache.go:164] successfully loaded and using gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e from cached tarball
I0714 19:10:17.642047   85028 cache.go:194] Successfully downloaded all kic artifacts
I0714 19:10:17.642073   85028 start.go:360] acquireMachinesLock for minikube-x86: {Name:mke2f2e4a0b52ef20036bf7fe85a04b51c95e59b Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0714 19:10:17.642233   85028 start.go:364] duration metric: took 152.542µs to acquireMachinesLock for "minikube-x86"
I0714 19:10:17.642263   85028 start.go:93] Provisioning new machine with config: &{Name:minikube-x86 KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:8192 CPUs:4 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.9 ClusterName:minikube-x86 Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.28.9 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} &{Name: IP: Port:8443 KubernetesVersion:v1.28.9 ContainerRuntime:docker ControlPlane:true Worker:true}
I0714 19:10:17.642298   85028 start.go:125] createHost starting for "" (driver="docker")
I0714 19:10:17.649558   85028 out.go:204] 🔥  Creating docker container (CPUs=4, Memory=8192MB) ...
I0714 19:10:17.649703   85028 start.go:159] libmachine.API.Create for "minikube-x86" (driver="docker")
I0714 19:10:17.649713   85028 client.go:168] LocalClient.Create starting
I0714 19:10:17.649806   85028 main.go:141] libmachine: Reading certificate data from /Users/jxhui/.minikube/certs/ca.pem
I0714 19:10:17.649844   85028 main.go:141] libmachine: Decoding PEM data...
I0714 19:10:17.649860   85028 main.go:141] libmachine: Parsing certificate...
I0714 19:10:17.649901   85028 main.go:141] libmachine: Reading certificate data from /Users/jxhui/.minikube/certs/cert.pem
I0714 19:10:17.649923   85028 main.go:141] libmachine: Decoding PEM data...
I0714 19:10:17.649927   85028 main.go:141] libmachine: Parsing certificate...
I0714 19:10:17.650318   85028 cli_runner.go:164] Run: docker network inspect minikube-x86 --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0714 19:10:17.665141   85028 cli_runner.go:211] docker network inspect minikube-x86 --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0714 19:10:17.665295   85028 network_create.go:281] running [docker network inspect minikube-x86] to gather additional debugging logs...
I0714 19:10:17.665307   85028 cli_runner.go:164] Run: docker network inspect minikube-x86
W0714 19:10:17.679037   85028 cli_runner.go:211] docker network inspect minikube-x86 returned with exit code 1
I0714 19:10:17.679150   85028 network_create.go:284] error running [docker network inspect minikube-x86]: docker network inspect minikube-x86: exit status 1
stdout:
[]

stderr:
Error response from daemon: network minikube-x86 not found
I0714 19:10:17.679157   85028 network_create.go:286] output of [docker network inspect minikube-x86]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network minikube-x86 not found

** /stderr **
I0714 19:10:17.679257   85028 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0714 19:10:17.692493   85028 network.go:206] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0x14001753bf0}
I0714 19:10:17.692523   85028 network_create.go:124] attempt to create docker network minikube-x86 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0714 19:10:17.692569   85028 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube-x86 minikube-x86
W0714 19:10:17.706956   85028 cli_runner.go:211] docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube-x86 minikube-x86 returned with exit code 1
W0714 19:10:17.707098   85028 network_create.go:149] failed to create docker network minikube-x86 192.168.49.0/24 with gateway 192.168.49.1 and mtu of 1500: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube-x86 minikube-x86: exit status 1
stdout:

stderr:
Error response from daemon: Pool overlaps with other one on this address space
W0714 19:10:17.707107   85028 network_create.go:116] failed to create docker network minikube-x86 192.168.49.0/24, will retry: subnet is taken
I0714 19:10:17.708399   85028 network.go:209] skipping subnet 192.168.49.0/24 that is reserved: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:<nil>}
I0714 19:10:17.708819   85028 network.go:206] using free private subnet 192.168.58.0/24: &{IP:192.168.58.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.58.0/24 Gateway:192.168.58.1 ClientMin:192.168.58.2 ClientMax:192.168.58.254 Broadcast:192.168.58.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0x140019401d0}
I0714 19:10:17.708825   85028 network_create.go:124] attempt to create docker network minikube-x86 192.168.58.0/24 with gateway 192.168.58.1 and MTU of 1500 ...
I0714 19:10:17.708864   85028 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.58.0/24 --gateway=192.168.58.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube-x86 minikube-x86
I0714 19:10:17.977755   85028 network_create.go:108] docker network minikube-x86 192.168.58.0/24 created
I0714 19:10:17.977864   85028 kic.go:121] calculated static IP "192.168.58.2" for the "minikube-x86" container
I0714 19:10:17.977938   85028 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0714 19:10:17.992152   85028 cli_runner.go:164] Run: docker volume create minikube-x86 --label name.minikube.sigs.k8s.io=minikube-x86 --label created_by.minikube.sigs.k8s.io=true
I0714 19:10:18.008679   85028 oci.go:103] Successfully created a docker volume minikube-x86
I0714 19:10:18.008852   85028 cli_runner.go:164] Run: docker run --rm --name minikube-x86-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube-x86 --entrypoint /usr/bin/test -v minikube-x86:/var gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -d /var/lib
I0714 19:10:20.243763   85028 cli_runner.go:217] Completed: docker run --rm --name minikube-x86-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube-x86 --entrypoint /usr/bin/test -v minikube-x86:/var gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -d /var/lib: (2.234891084s)
I0714 19:10:20.243871   85028 oci.go:107] Successfully prepared a docker volume minikube-x86
I0714 19:10:20.243893   85028 preload.go:132] Checking if preload exists for k8s version v1.28.9 and runtime docker
I0714 19:10:20.243903   85028 kic.go:194] Starting extracting preloaded images to volume ...
I0714 19:10:20.243977   85028 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /Users/jxhui/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.9-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v minikube-x86:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -I lz4 -xf /preloaded.tar -C /extractDir
I0714 19:10:28.615913   85028 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /Users/jxhui/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.9-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v minikube-x86:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -I lz4 -xf /preloaded.tar -C /extractDir: (8.371947625s)
I0714 19:10:28.615935   85028 kic.go:203] duration metric: took 8.372069459s to extract preloaded images to volume ...
I0714 19:10:28.616293   85028 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0714 19:10:28.684144   85028 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube-x86 --name minikube-x86 --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube-x86 --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube-x86 --network minikube-x86 --ip 192.168.58.2 --volume minikube-x86:/var --security-opt apparmor=unconfined --memory=8192mb --memory-swap=8192mb --cpus=4 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e
I0714 19:10:29.712885   85028 cli_runner.go:217] Completed: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube-x86 --name minikube-x86 --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube-x86 --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube-x86 --network minikube-x86 --ip 192.168.58.2 --volume minikube-x86:/var --security-opt apparmor=unconfined --memory=8192mb --memory-swap=8192mb --cpus=4 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e: (1.028624625s)
I0714 19:10:29.713054   85028 cli_runner.go:164] Run: docker container inspect minikube-x86 --format={{.State.Running}}
I0714 19:10:29.730473   85028 cli_runner.go:164] Run: docker container inspect minikube-x86 --format={{.State.Status}}
I0714 19:10:29.747920   85028 cli_runner.go:164] Run: docker exec minikube-x86 stat /var/lib/dpkg/alternatives/iptables
I0714 19:10:30.150748   85028 oci.go:144] the created container "minikube-x86" has a running status.
I0714 19:10:30.150853   85028 kic.go:225] Creating ssh key for kic: /Users/jxhui/.minikube/machines/minikube-x86/id_rsa...
I0714 19:10:30.352036   85028 kic_runner.go:191] docker (temp): /Users/jxhui/.minikube/machines/minikube-x86/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0714 19:10:30.406482   85028 cli_runner.go:164] Run: docker container inspect minikube-x86 --format={{.State.Status}}
I0714 19:10:30.423993   85028 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0714 19:10:30.424005   85028 kic_runner.go:114] Args: [docker exec --privileged minikube-x86 chown docker:docker /home/docker/.ssh/authorized_keys]
I0714 19:10:30.578442   85028 cli_runner.go:164] Run: docker container inspect minikube-x86 --format={{.State.Status}}
I0714 19:10:30.600351   85028 machine.go:94] provisionDockerMachine start ...
I0714 19:10:30.600529   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:30.618615   85028 main.go:141] libmachine: Using SSH client type: native
I0714 19:10:30.618788   85028 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x10041b180] 0x10041d9e0 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0714 19:10:30.618795   85028 main.go:141] libmachine: About to run SSH command:
hostname
I0714 19:10:30.618906   85028 main.go:141] libmachine: Error dialing TCP: dial tcp 127.0.0.1:32777: connect: connection refused
I0714 19:10:33.940033   85028 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube-x86

I0714 19:10:33.940048   85028 ubuntu.go:169] provisioning hostname "minikube-x86"
I0714 19:10:33.940114   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:33.955376   85028 main.go:141] libmachine: Using SSH client type: native
I0714 19:10:33.955511   85028 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x10041b180] 0x10041d9e0 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0714 19:10:33.955514   85028 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube-x86 && echo "minikube-x86" | sudo tee /etc/hostname
I0714 19:10:34.331339   85028 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube-x86

I0714 19:10:34.331431   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:34.348100   85028 main.go:141] libmachine: Using SSH client type: native
I0714 19:10:34.348231   85028 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x10041b180] 0x10041d9e0 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0714 19:10:34.348238   85028 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube-x86' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube-x86/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube-x86' | sudo tee -a /etc/hosts; 
			fi
		fi
I0714 19:10:34.630637   85028 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0714 19:10:34.630650   85028 ubuntu.go:175] set auth options {CertDir:/Users/jxhui/.minikube CaCertPath:/Users/jxhui/.minikube/certs/ca.pem CaPrivateKeyPath:/Users/jxhui/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/Users/jxhui/.minikube/machines/server.pem ServerKeyPath:/Users/jxhui/.minikube/machines/server-key.pem ClientKeyPath:/Users/jxhui/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/Users/jxhui/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/Users/jxhui/.minikube}
I0714 19:10:34.630673   85028 ubuntu.go:177] setting up certificates
I0714 19:10:34.630681   85028 provision.go:84] configureAuth start
I0714 19:10:34.630741   85028 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube-x86
I0714 19:10:34.645506   85028 provision.go:143] copyHostCerts
I0714 19:10:34.645595   85028 exec_runner.go:144] found /Users/jxhui/.minikube/ca.pem, removing ...
I0714 19:10:34.645600   85028 exec_runner.go:203] rm: /Users/jxhui/.minikube/ca.pem
I0714 19:10:34.646523   85028 exec_runner.go:151] cp: /Users/jxhui/.minikube/certs/ca.pem --> /Users/jxhui/.minikube/ca.pem (1074 bytes)
I0714 19:10:34.646693   85028 exec_runner.go:144] found /Users/jxhui/.minikube/cert.pem, removing ...
I0714 19:10:34.646696   85028 exec_runner.go:203] rm: /Users/jxhui/.minikube/cert.pem
I0714 19:10:34.646747   85028 exec_runner.go:151] cp: /Users/jxhui/.minikube/certs/cert.pem --> /Users/jxhui/.minikube/cert.pem (1119 bytes)
I0714 19:10:34.646844   85028 exec_runner.go:144] found /Users/jxhui/.minikube/key.pem, removing ...
I0714 19:10:34.646846   85028 exec_runner.go:203] rm: /Users/jxhui/.minikube/key.pem
I0714 19:10:34.646889   85028 exec_runner.go:151] cp: /Users/jxhui/.minikube/certs/key.pem --> /Users/jxhui/.minikube/key.pem (1679 bytes)
I0714 19:10:34.646957   85028 provision.go:117] generating server cert: /Users/jxhui/.minikube/machines/server.pem ca-key=/Users/jxhui/.minikube/certs/ca.pem private-key=/Users/jxhui/.minikube/certs/ca-key.pem org=jxhui.minikube-x86 san=[127.0.0.1 192.168.58.2 localhost minikube minikube-x86]
I0714 19:10:34.741547   85028 provision.go:177] copyRemoteCerts
I0714 19:10:34.741808   85028 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0714 19:10:34.741858   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:34.755366   85028 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/Users/jxhui/.minikube/machines/minikube-x86/id_rsa Username:docker}
I0714 19:10:34.958785   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1074 bytes)
I0714 19:10:35.090289   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/machines/server.pem --> /etc/docker/server.pem (1200 bytes)
I0714 19:10:35.220748   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0714 19:10:35.360171   85028 provision.go:87] duration metric: took 729.487333ms to configureAuth
I0714 19:10:35.360181   85028 ubuntu.go:193] setting minikube options for container-runtime
I0714 19:10:35.361033   85028 config.go:182] Loaded profile config "minikube-x86": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.9
I0714 19:10:35.361085   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:35.377094   85028 main.go:141] libmachine: Using SSH client type: native
I0714 19:10:35.377258   85028 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x10041b180] 0x10041d9e0 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0714 19:10:35.377260   85028 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0714 19:10:35.677919   85028 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0714 19:10:35.677925   85028 ubuntu.go:71] root file system type: overlay
I0714 19:10:35.677983   85028 provision.go:314] Updating docker unit: /lib/systemd/system/docker.service ...
I0714 19:10:35.678054   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:35.692568   85028 main.go:141] libmachine: Using SSH client type: native
I0714 19:10:35.692735   85028 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x10041b180] 0x10041d9e0 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0714 19:10:35.692761   85028 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0714 19:10:36.034725   85028 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0714 19:10:36.034800   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:36.051217   85028 main.go:141] libmachine: Using SSH client type: native
I0714 19:10:36.051363   85028 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x10041b180] 0x10041d9e0 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0714 19:10:36.051369   85028 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0714 19:10:39.459339   85028 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2024-04-30 11:46:26.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2024-07-14 09:10:35.993012301 +0000
@@ -1,46 +1,49 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
+LimitNOFILE=infinity
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0714 19:10:39.459351   85028 machine.go:97] duration metric: took 8.858979792s to provisionDockerMachine
I0714 19:10:39.459357   85028 client.go:171] duration metric: took 21.809745125s to LocalClient.Create
I0714 19:10:39.459372   85028 start.go:167] duration metric: took 21.809770959s to libmachine.API.Create "minikube-x86"
I0714 19:10:39.459380   85028 start.go:293] postStartSetup for "minikube-x86" (driver="docker")
I0714 19:10:39.459385   85028 start.go:322] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0714 19:10:39.459485   85028 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0714 19:10:39.459519   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:39.476039   85028 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/Users/jxhui/.minikube/machines/minikube-x86/id_rsa Username:docker}
I0714 19:10:39.705025   85028 ssh_runner.go:195] Run: cat /etc/os-release
I0714 19:10:39.732772   85028 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0714 19:10:39.732788   85028 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0714 19:10:39.732791   85028 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0714 19:10:39.732794   85028 info.go:137] Remote host: Ubuntu 22.04.4 LTS
I0714 19:10:39.732799   85028 filesync.go:126] Scanning /Users/jxhui/.minikube/addons for local assets ...
I0714 19:10:39.733183   85028 filesync.go:126] Scanning /Users/jxhui/.minikube/files for local assets ...
I0714 19:10:39.733237   85028 start.go:296] duration metric: took 273.855625ms for postStartSetup
I0714 19:10:39.733591   85028 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube-x86
I0714 19:10:39.748294   85028 profile.go:143] Saving config to /Users/jxhui/.minikube/profiles/minikube-x86/config.json ...
I0714 19:10:39.749007   85028 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0714 19:10:39.749035   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:39.777748   85028 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/Users/jxhui/.minikube/machines/minikube-x86/id_rsa Username:docker}
I0714 19:10:39.978982   85028 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0714 19:10:40.001406   85028 start.go:128] duration metric: took 22.35920775s to createHost
I0714 19:10:40.001420   85028 start.go:83] releasing machines lock for "minikube-x86", held for 22.359289625s
I0714 19:10:40.001489   85028 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube-x86
I0714 19:10:40.015856   85028 ssh_runner.go:195] Run: cat /version.json
I0714 19:10:40.015916   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:40.016629   85028 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0714 19:10:40.016712   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:40.030680   85028 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/Users/jxhui/.minikube/machines/minikube-x86/id_rsa Username:docker}
I0714 19:10:40.031229   85028 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/Users/jxhui/.minikube/machines/minikube-x86/id_rsa Username:docker}
I0714 19:10:40.682687   85028 ssh_runner.go:195] Run: systemctl --version
I0714 19:10:40.706864   85028 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0714 19:10:40.735640   85028 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0714 19:10:40.900129   85028 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0714 19:10:40.900237   85028 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0714 19:10:41.036279   85028 cni.go:262] disabled [/etc/cni/net.d/87-podman-bridge.conflist, /etc/cni/net.d/100-crio-bridge.conf] bridge cni config(s)
I0714 19:10:41.036286   85028 start.go:494] detecting cgroup driver to use...
I0714 19:10:41.036295   85028 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0714 19:10:41.036383   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0714 19:10:41.127266   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0714 19:10:41.186921   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0714 19:10:41.238617   85028 containerd.go:146] configuring containerd to use "cgroupfs" as cgroup driver...
I0714 19:10:41.238735   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0714 19:10:41.292207   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0714 19:10:41.343032   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0714 19:10:41.395313   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0714 19:10:41.446173   85028 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0714 19:10:41.496684   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0714 19:10:41.549358   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i '/^ *enable_unprivileged_ports = .*/d' /etc/containerd/config.toml"
I0714 19:10:41.602472   85028 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)\[plugins."io.containerd.grpc.v1.cri"\]|&\n\1  enable_unprivileged_ports = true|' /etc/containerd/config.toml"
I0714 19:10:41.655588   85028 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0714 19:10:41.703923   85028 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0714 19:10:41.749821   85028 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0714 19:10:42.102626   85028 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0714 19:10:42.453873   85028 start.go:494] detecting cgroup driver to use...
I0714 19:10:42.453887   85028 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0714 19:10:42.453964   85028 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0714 19:10:42.522471   85028 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0714 19:10:42.522558   85028 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0714 19:10:42.591334   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0714 19:10:42.692941   85028 ssh_runner.go:195] Run: which cri-dockerd
I0714 19:10:42.714081   85028 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0714 19:10:42.771685   85028 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0714 19:10:42.875784   85028 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0714 19:10:43.268390   85028 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0714 19:10:43.672451   85028 docker.go:574] configuring docker to use "cgroupfs" as cgroup driver...
I0714 19:10:43.672518   85028 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (130 bytes)
I0714 19:10:43.774174   85028 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0714 19:10:44.149426   85028 ssh_runner.go:195] Run: sudo systemctl restart docker
I0714 19:10:45.668153   85028 ssh_runner.go:235] Completed: sudo systemctl restart docker: (1.518720875s)
I0714 19:10:45.668256   85028 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.socket
I0714 19:10:45.730526   85028 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0714 19:10:45.791488   85028 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0714 19:10:46.200147   85028 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0714 19:10:46.548238   85028 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0714 19:10:46.889793   85028 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0714 19:10:46.968039   85028 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0714 19:10:47.024509   85028 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0714 19:10:47.370731   85028 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.service
I0714 19:10:48.304402   85028 start.go:541] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0714 19:10:48.305221   85028 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0714 19:10:48.356989   85028 start.go:562] Will wait 60s for crictl version
I0714 19:10:48.357075   85028 ssh_runner.go:195] Run: which crictl
I0714 19:10:48.381455   85028 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0714 19:10:48.796958   85028 start.go:578] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  26.1.1
RuntimeApiVersion:  v1
I0714 19:10:48.796997   85028 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0714 19:10:49.080293   85028 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0714 19:10:49.194434   85028 out.go:204] 🐳  Preparing Kubernetes v1.28.9 on Docker 26.1.1 ...
I0714 19:10:49.194547   85028 cli_runner.go:164] Run: docker exec -t minikube-x86 dig +short host.docker.internal
I0714 19:10:49.653760   85028 network.go:96] got host ip for mount in container by digging dns: 192.168.5.2
I0714 19:10:49.653895   85028 ssh_runner.go:195] Run: grep 192.168.5.2	host.minikube.internal$ /etc/hosts
I0714 19:10:49.689372   85028 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.5.2	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0714 19:10:49.765675   85028 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube-x86
I0714 19:10:49.781450   85028 kubeadm.go:877] updating cluster {Name:minikube-x86 KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:8192 CPUs:4 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.9 ClusterName:minikube-x86 Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.58.2 Port:8443 KubernetesVersion:v1.28.9 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} ...
I0714 19:10:49.781528   85028 preload.go:132] Checking if preload exists for k8s version v1.28.9 and runtime docker
I0714 19:10:49.781565   85028 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0714 19:10:49.887866   85028 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.28.9
registry.k8s.io/kube-controller-manager:v1.28.9
registry.k8s.io/kube-scheduler:v1.28.9
registry.k8s.io/kube-proxy:v1.28.9
registry.k8s.io/etcd:3.5.12-0
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0714 19:10:49.887876   85028 docker.go:615] Images already preloaded, skipping extraction
I0714 19:10:49.887934   85028 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0714 19:10:49.977582   85028 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.28.9
registry.k8s.io/kube-controller-manager:v1.28.9
registry.k8s.io/kube-scheduler:v1.28.9
registry.k8s.io/kube-proxy:v1.28.9
registry.k8s.io/etcd:3.5.12-0
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0714 19:10:49.977590   85028 cache_images.go:84] Images are preloaded, skipping loading
I0714 19:10:49.977604   85028 kubeadm.go:928] updating node { 192.168.58.2 8443 v1.28.9 docker true true} ...
I0714 19:10:49.977669   85028 kubeadm.go:940] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.28.9/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --hostname-override=minikube-x86 --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.58.2

[Install]
 config:
{KubernetesVersion:v1.28.9 ClusterName:minikube-x86 Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:}
I0714 19:10:49.977717   85028 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0714 19:10:50.386735   85028 cni.go:84] Creating CNI manager for ""
I0714 19:10:50.386742   85028 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0714 19:10:50.386752   85028 kubeadm.go:84] Using pod CIDR: 10.244.0.0/16
I0714 19:10:50.386759   85028 kubeadm.go:181] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.58.2 APIServerPort:8443 KubernetesVersion:v1.28.9 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube-x86 NodeName:minikube-x86 DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.58.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.58.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[containerRuntimeEndpoint:unix:///var/run/cri-dockerd.sock hairpinMode:hairpin-veth runtimeRequestTimeout:15m] PrependCriSocketUnix:true}
I0714 19:10:50.386836   85028 kubeadm.go:187] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.58.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: unix:///var/run/cri-dockerd.sock
  name: "minikube-x86"
  kubeletExtraArgs:
    node-ip: 192.168.58.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.58.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.28.9
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
containerRuntimeEndpoint: unix:///var/run/cri-dockerd.sock
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0714 19:10:50.386925   85028 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.28.9
I0714 19:10:50.436490   85028 binaries.go:44] Found k8s binaries, skipping transfer
I0714 19:10:50.436574   85028 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0714 19:10:50.486486   85028 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (311 bytes)
I0714 19:10:50.584723   85028 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0714 19:10:50.677779   85028 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2154 bytes)
I0714 19:10:50.773398   85028 ssh_runner.go:195] Run: grep 192.168.58.2	control-plane.minikube.internal$ /etc/hosts
I0714 19:10:50.792070   85028 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.58.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0714 19:10:50.849779   85028 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0714 19:10:51.288218   85028 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0714 19:10:51.393671   85028 certs.go:68] Setting up /Users/jxhui/.minikube/profiles/minikube-x86 for IP: 192.168.58.2
I0714 19:10:51.393684   85028 certs.go:194] generating shared ca certs ...
I0714 19:10:51.393690   85028 certs.go:226] acquiring lock for ca certs: {Name:mk1610a9a1fba4ebd5cf73c289ca82246d6b3a8c Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:10:51.393870   85028 certs.go:235] skipping valid "minikubeCA" ca cert: /Users/jxhui/.minikube/ca.key
I0714 19:10:51.393909   85028 certs.go:235] skipping valid "proxyClientCA" ca cert: /Users/jxhui/.minikube/proxy-client-ca.key
I0714 19:10:51.393912   85028 certs.go:256] generating profile certs ...
I0714 19:10:51.393943   85028 certs.go:363] generating signed profile cert for "minikube-user": /Users/jxhui/.minikube/profiles/minikube-x86/client.key
I0714 19:10:51.393949   85028 crypto.go:68] Generating cert /Users/jxhui/.minikube/profiles/minikube-x86/client.crt with IP's: []
I0714 19:10:51.435907   85028 crypto.go:156] Writing cert to /Users/jxhui/.minikube/profiles/minikube-x86/client.crt ...
I0714 19:10:51.435912   85028 lock.go:35] WriteFile acquiring /Users/jxhui/.minikube/profiles/minikube-x86/client.crt: {Name:mk8029dff6fe969d029aaf3856f386fc36a9679e Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:10:51.436154   85028 crypto.go:164] Writing key to /Users/jxhui/.minikube/profiles/minikube-x86/client.key ...
I0714 19:10:51.436156   85028 lock.go:35] WriteFile acquiring /Users/jxhui/.minikube/profiles/minikube-x86/client.key: {Name:mk9d88745b6763fe5fc7546d4bf9d38b0ab03dca Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:10:51.436272   85028 certs.go:363] generating signed profile cert for "minikube": /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.key.a7ef834a
I0714 19:10:51.436277   85028 crypto.go:68] Generating cert /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.crt.a7ef834a with IP's: [10.96.0.1 127.0.0.1 10.0.0.1 192.168.58.2]
I0714 19:10:51.470331   85028 crypto.go:156] Writing cert to /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.crt.a7ef834a ...
I0714 19:10:51.470341   85028 lock.go:35] WriteFile acquiring /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.crt.a7ef834a: {Name:mk141718d27b8591bf616061bcdd7c764abfa30a Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:10:51.470572   85028 crypto.go:164] Writing key to /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.key.a7ef834a ...
I0714 19:10:51.470574   85028 lock.go:35] WriteFile acquiring /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.key.a7ef834a: {Name:mk103ca9e51b7e50dbf2a302199075cced880f5f Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:10:51.470692   85028 certs.go:381] copying /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.crt.a7ef834a -> /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.crt
I0714 19:10:51.470794   85028 certs.go:385] copying /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.key.a7ef834a -> /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.key
I0714 19:10:51.470876   85028 certs.go:363] generating signed profile cert for "aggregator": /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.key
I0714 19:10:51.470882   85028 crypto.go:68] Generating cert /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.crt with IP's: []
I0714 19:10:51.541883   85028 crypto.go:156] Writing cert to /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.crt ...
I0714 19:10:51.541894   85028 lock.go:35] WriteFile acquiring /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.crt: {Name:mk80c1af40d7a938f47d31f75687e07ab51e7fca Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:10:51.542192   85028 crypto.go:164] Writing key to /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.key ...
I0714 19:10:51.542195   85028 lock.go:35] WriteFile acquiring /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.key: {Name:mk10edf3795eb21075697bbac0ee2ca8fa555e07 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0714 19:10:51.542674   85028 certs.go:484] found cert: /Users/jxhui/.minikube/certs/ca-key.pem (1679 bytes)
I0714 19:10:51.542703   85028 certs.go:484] found cert: /Users/jxhui/.minikube/certs/ca.pem (1074 bytes)
I0714 19:10:51.542728   85028 certs.go:484] found cert: /Users/jxhui/.minikube/certs/cert.pem (1119 bytes)
I0714 19:10:51.542750   85028 certs.go:484] found cert: /Users/jxhui/.minikube/certs/key.pem (1679 bytes)
I0714 19:10:51.543008   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0714 19:10:51.685970   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1679 bytes)
I0714 19:10:51.814546   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0714 19:10:51.943673   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0714 19:10:52.070584   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1419 bytes)
I0714 19:10:52.199982   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/profiles/minikube-x86/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1679 bytes)
I0714 19:10:52.323818   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0714 19:10:52.451848   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/profiles/minikube-x86/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0714 19:10:52.576831   85028 ssh_runner.go:362] scp /Users/jxhui/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0714 19:10:52.707549   85028 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (740 bytes)
I0714 19:10:52.798474   85028 ssh_runner.go:195] Run: openssl version
I0714 19:10:52.823639   85028 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0714 19:10:52.881542   85028 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0714 19:10:52.903827   85028 certs.go:528] hashing: -rw-r--r-- 1 root root 1111 Jul 11 12:36 /usr/share/ca-certificates/minikubeCA.pem
I0714 19:10:52.903888   85028 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0714 19:10:52.946890   85028 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0714 19:10:53.000099   85028 ssh_runner.go:195] Run: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt
I0714 19:10:53.020310   85028 certs.go:399] 'apiserver-kubelet-client' cert doesn't exist, likely first start: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt: Process exited with status 1
stdout:

stderr:
stat: cannot statx '/var/lib/minikube/certs/apiserver-kubelet-client.crt': No such file or directory
I0714 19:10:53.020346   85028 kubeadm.go:391] StartCluster: {Name:minikube-x86 KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:8192 CPUs:4 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.9 ClusterName:minikube-x86 Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.58.2 Port:8443 KubernetesVersion:v1.28.9 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0714 19:10:53.020414   85028 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0714 19:10:53.104774   85028 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0714 19:10:53.152778   85028 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0714 19:10:53.203090   85028 kubeadm.go:213] ignoring SystemVerification for kubeadm because of docker driver
I0714 19:10:53.203173   85028 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0714 19:10:53.250030   85028 kubeadm.go:154] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0714 19:10:53.250035   85028 kubeadm.go:156] found existing configuration files:

I0714 19:10:53.250111   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf
I0714 19:10:53.300587   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/admin.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/admin.conf: No such file or directory
I0714 19:10:53.300681   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/admin.conf
I0714 19:10:53.347725   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf
I0714 19:10:53.395755   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/kubelet.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/kubelet.conf: No such file or directory
I0714 19:10:53.395834   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/kubelet.conf
I0714 19:10:53.444421   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf
I0714 19:10:53.491240   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/controller-manager.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/controller-manager.conf: No such file or directory
I0714 19:10:53.491322   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/controller-manager.conf
I0714 19:10:53.536341   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf
I0714 19:10:53.582652   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/scheduler.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/scheduler.conf: No such file or directory
I0714 19:10:53.582743   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/scheduler.conf
I0714 19:10:53.630906   85028 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0714 19:10:53.697595   85028 kubeadm.go:309] /var/lib/minikube/binaries/v1.28.9/kubeadm: 1: Syntax error: Unterminated quoted string
W0714 19:10:53.697657   85028 out.go:239] 💢  initialization failed, will try again: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 2
stdout:

stderr:
/var/lib/minikube/binaries/v1.28.9/kubeadm: 1: Syntax error: Unterminated quoted string

I0714 19:10:53.697683   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force"
W0714 19:10:53.762352   85028 kubeadm.go:863] /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force": <nil>
I0714 19:10:53.762455   85028 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
W0714 19:10:53.819738   85028 kubeadm.go:434] delete failed: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force": Process exited with status 2
stdout:

stderr:
/var/lib/minikube/binaries/v1.28.9/kubeadm: 1: Syntax error: Unterminated quoted string
I0714 19:10:53.819754   85028 kubeadm.go:213] ignoring SystemVerification for kubeadm because of docker driver
I0714 19:10:53.819837   85028 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0714 19:10:53.867637   85028 kubeadm.go:154] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0714 19:10:53.867646   85028 kubeadm.go:156] found existing configuration files:

I0714 19:10:53.867719   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf
I0714 19:10:53.913613   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/admin.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/admin.conf: No such file or directory
I0714 19:10:53.913704   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/admin.conf
I0714 19:10:53.958379   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf
I0714 19:10:54.004287   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/kubelet.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/kubelet.conf: No such file or directory
I0714 19:10:54.004362   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/kubelet.conf
I0714 19:10:54.050131   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf
I0714 19:10:54.096327   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/controller-manager.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/controller-manager.conf: No such file or directory
I0714 19:10:54.096408   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/controller-manager.conf
I0714 19:10:54.141144   85028 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf
I0714 19:10:54.187298   85028 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/scheduler.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/scheduler.conf: No such file or directory
I0714 19:10:54.187374   85028 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/scheduler.conf
I0714 19:10:54.231791   85028 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0714 19:10:54.294699   85028 kubeadm.go:309] /var/lib/minikube/binaries/v1.28.9/kubeadm: 1: Syntax error: Unterminated quoted string
I0714 19:10:54.294722   85028 kubeadm.go:393] duration metric: took 1.274384959s to StartCluster
I0714 19:10:54.294737   85028 cri.go:54] listing CRI containers in root : {State:all Name:kube-apiserver Namespaces:[]}
I0714 19:10:54.294817   85028 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-apiserver
I0714 19:10:54.485931   85028 cri.go:89] found id: ""
I0714 19:10:54.485943   85028 logs.go:276] 0 containers: []
W0714 19:10:54.485947   85028 logs.go:278] No container was found matching "kube-apiserver"
I0714 19:10:54.485950   85028 cri.go:54] listing CRI containers in root : {State:all Name:etcd Namespaces:[]}
I0714 19:10:54.486038   85028 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=etcd
I0714 19:10:54.648344   85028 cri.go:89] found id: ""
I0714 19:10:54.648352   85028 logs.go:276] 0 containers: []
W0714 19:10:54.648356   85028 logs.go:278] No container was found matching "etcd"
I0714 19:10:54.648359   85028 cri.go:54] listing CRI containers in root : {State:all Name:coredns Namespaces:[]}
I0714 19:10:54.648438   85028 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=coredns
I0714 19:10:54.809420   85028 cri.go:89] found id: ""
I0714 19:10:54.809429   85028 logs.go:276] 0 containers: []
W0714 19:10:54.809433   85028 logs.go:278] No container was found matching "coredns"
I0714 19:10:54.809436   85028 cri.go:54] listing CRI containers in root : {State:all Name:kube-scheduler Namespaces:[]}
I0714 19:10:54.809530   85028 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-scheduler
I0714 19:10:54.967705   85028 cri.go:89] found id: ""
I0714 19:10:54.967714   85028 logs.go:276] 0 containers: []
W0714 19:10:54.967718   85028 logs.go:278] No container was found matching "kube-scheduler"
I0714 19:10:54.967720   85028 cri.go:54] listing CRI containers in root : {State:all Name:kube-proxy Namespaces:[]}
I0714 19:10:54.967798   85028 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-proxy
I0714 19:10:55.127760   85028 cri.go:89] found id: ""
I0714 19:10:55.127767   85028 logs.go:276] 0 containers: []
W0714 19:10:55.127771   85028 logs.go:278] No container was found matching "kube-proxy"
I0714 19:10:55.127774   85028 cri.go:54] listing CRI containers in root : {State:all Name:kube-controller-manager Namespaces:[]}
I0714 19:10:55.127876   85028 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-controller-manager
I0714 19:10:55.300374   85028 cri.go:89] found id: ""
I0714 19:10:55.300381   85028 logs.go:276] 0 containers: []
W0714 19:10:55.300385   85028 logs.go:278] No container was found matching "kube-controller-manager"
I0714 19:10:55.300388   85028 cri.go:54] listing CRI containers in root : {State:all Name:kindnet Namespaces:[]}
I0714 19:10:55.300475   85028 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kindnet
I0714 19:10:55.461768   85028 cri.go:89] found id: ""
I0714 19:10:55.461777   85028 logs.go:276] 0 containers: []
W0714 19:10:55.461781   85028 logs.go:278] No container was found matching "kindnet"
I0714 19:10:55.461786   85028 logs.go:123] Gathering logs for kubelet ...
I0714 19:10:55.461790   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo journalctl -u kubelet -n 400"
I0714 19:10:55.535188   85028 logs.go:123] Gathering logs for dmesg ...
I0714 19:10:55.535196   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo dmesg -PH -L=never --level warn,err,crit,alert,emerg | tail -n 400"
I0714 19:10:55.603605   85028 logs.go:123] Gathering logs for describe nodes ...
I0714 19:10:55.603614   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.28.9/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig"
W0714 19:10:55.663884   85028 logs.go:130] failed describe nodes: command: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.28.9/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig" /bin/bash -c "sudo /var/lib/minikube/binaries/v1.28.9/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig": Process exited with status 2
stdout:

stderr:
/var/lib/minikube/binaries/v1.28.9/kubectl: 1: Syntax error: ")" unexpected
 output: 
** stderr ** 
/var/lib/minikube/binaries/v1.28.9/kubectl: 1: Syntax error: ")" unexpected

** /stderr **
I0714 19:10:55.663889   85028 logs.go:123] Gathering logs for Docker ...
I0714 19:10:55.663893   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo journalctl -u docker -u cri-docker -n 400"
I0714 19:10:55.733963   85028 logs.go:123] Gathering logs for container status ...
I0714 19:10:55.733971   85028 ssh_runner.go:195] Run: /bin/bash -c "sudo `which crictl || echo crictl` ps -a || sudo docker ps -a"
W0714 19:10:55.911935   85028 out.go:364] Error starting cluster: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 2
stdout:

stderr:
/var/lib/minikube/binaries/v1.28.9/kubeadm: 1: Syntax error: Unterminated quoted string
W0714 19:10:55.911944   85028 out.go:239] 
W0714 19:10:55.911989   85028 out.go:239] 💣  Error starting cluster: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 2
stdout:

stderr:
/var/lib/minikube/binaries/v1.28.9/kubeadm: 1: Syntax error: Unterminated quoted string

W0714 19:10:55.911993   85028 out.go:239] 
W0714 19:10:55.912375   85028 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0714 19:10:55.922196   85028 out.go:177] 
W0714 19:10:55.931229   85028 out.go:239] ❌  Exiting due to GUEST_START: failed to start node: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.9:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 2
stdout:

stderr:
/var/lib/minikube/binaries/v1.28.9/kubeadm: 1: Syntax error: Unterminated quoted string

W0714 19:10:55.931240   85028 out.go:239] 
W0714 19:10:55.931597   85028 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0714 19:10:55.940090   85028 out.go:177] 


